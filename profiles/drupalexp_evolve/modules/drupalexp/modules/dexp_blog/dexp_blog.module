<?php
/**
 * Implements hook_ctools_plugin_api().
 */
function dexp_blog_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "file_entity" && $api == "file_default_displays") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function dexp_blog_views_api() {
  return array("api" => "3.0");
}

/**
 * Implements hook_image_default_styles().
 */
function dexp_blog_image_default_styles() {
  $styles = array();

  // Exported image style: 265x190.
  $styles['265x190'] = array(
    'name' => '265x190',
    'label' => '265x190',
    'effects' => array(
      8 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 265,
          'height' => 190,
        ),
        'weight' => 1,
      ),
    ),
  );

  // Exported image style: blog_large_image.
  $styles['blog_large_image'] = array(
    'name' => 'blog_large_image',
    'label' => 'Blog Large Image',
    'effects' => array(
      7 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 870,
          'height' => 353,
        ),
        'weight' => 1,
      ),
    ),
  );

  // Exported image style: blog_timeline.
  $styles['blog_timeline'] = array(
    'name' => 'blog_timeline',
    'label' => 'Blog Timeline',
    'effects' => array(
      6 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 502,
          'height' => 265,
        ),
        'weight' => 1,
      ),
    ),
  );

  // Exported image style: medium_blog.
  $styles['medium_blog'] = array(
    'name' => 'medium_blog',
    'label' => 'Medium Blog',
    'effects' => array(
      4 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 320,
          'height' => 219,
        ),
        'weight' => 2,
      ),
    ),
  );

  return $styles;
}

/**
* Implements hook_entity_info_alter().
*/
function dexp_blog_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['large_image'] = array(
    'label' => t('Blog Large Image'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['time_line'] = array(
    'label' => t('Blog Timeline'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['slider'] = array(
    'label' => t('Blog Slider'),
    'custom settings' => TRUE,
  );
}

/**
* Implements hook_preprocess_node().
*/
function dexp_blog_preprocess_node(&$vars) {
  if($vars['view_mode'] == 'large_image') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__large_image';
  }
  if($vars['view_mode'] == 'time_line') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__time_line';
  }
  if($vars['view_mode'] == 'slider') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__slider';
  }
} 

function dexp_blog_page_alter(&$page) {
  if (current_path() == 'blog' && theme_get_setting('blog_style', 'evolve') == 'timeline') {
    unset($page['right_sidebar']);
  }
}

/**
 * Implements hook_node_info().
 */
function dexp_blog_node_info() {
  $items = array(
    'article' => array(
      'name' => t('Article'),
      'base' => 'node_content',
      'description' => t('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}
